<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.guet.dao.IEventDao">
  
  <!-- 查询用户已发布的已处理的事件信息 -->
  <select id="getProcessedEventByUsername" parameterType="com.guet.domain.Page" resultType="com.guet.domain.Event">
      select * from event where (publisher=#{userName} or publisher=null) and (status=1 or status=null) limit #{index1},#{currentTotal}
  </select>
  
  <!-- 查询用户已发布的未处理的事件信息 -->
   <select id="getNotProcessedEventByUsername" parameterType="com.guet.domain.Page" resultType="com.guet.domain.Event">
      select * from event where (publisher=#{userName} or publisher=null) and (status=0 or status=null) limit #{index1},#{currentTotal}
  </select>

    <!-- 查询用户需要处理的已处理的事件信息(对于用户B） -->
    <select id="getHaveProcessedEventByUsername" parameterType="com.guet.domain.Page" resultType="com.guet.domain.Event">
        select * from event where (handler=#{userName} or handler=null) and (status=1 or status=null) limit #{index1},#{currentTotal}
    </select>

    <!-- 查询用户需要处理的未处理的事件信息 (对于用户B）-->
    <select id="getHaveNotProcessedEventByUsername" parameterType="com.guet.domain.Page" resultType="com.guet.domain.Event">
        select * from event where (handler=#{userName} or handler=null) and (status=0 or status=null) limit #{index1},#{currentTotal}
    </select>

    <!-- 查询用户需要处理的已处理的事件信息(对于用户C、D） -->
    <select id="getHaveProcessedEventByUsername1" parameterType="com.guet.domain.Page" resultType="com.guet.domain.Event">
        select * from event where (handler=#{userName} or forwarderReceiver=#{userName} or thirdparty=#{userName} or handler=null)
        and (status=1 or status=null) limit #{index1},#{currentTotal}
    </select>

    <!-- 查询用户需要处理的未处理的事件信息 (对于用户C、D）-->
    <select id="getHaveNotProcessedEventByUsername1" parameterType="com.guet.domain.Page" resultType="com.guet.domain.Event">
        select * from event where (handler=#{userName} or forwarderReceiver=#{userName} or thirdparty=#{userName} or handler=null)
        and(status=0 or status=null) limit #{index1},#{currentTotal}
    </select>
  
  <!-- 发布事件信息 -->
  <insert id="insertEvent" parameterType="com.guet.domain.Event">
      insert into event(eventContent,eventLevel,startDate,endDate,status,publisher,deadline,handler,eventtype,forwarder,thirdparty,forwarderReceiver,departmentA,departmentB,departmentC)
      values(#{eventContent},#{eventLevel},#{startDate},#{endDate},#{status},#{publisher},#{deadline},#{handler},#{eventtype},#{forwarder},#{thirdparty},#{forwarderReceiver},#{departmentA},#{departmentB},#{departmentC})
  </insert>
  
   <!-- 删除事件信息 -->
  <delete id="deleteEvent" parameterType="java.lang.Integer">
      delete from event where eventID=#{eventID}
  </delete>

    <!-- 查询用户已发布的已处理的事件数量 -->
    <select id="getProcessPagesNumByUsername" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from event where (publisher=#{userName} or publisher=null) and (status=1 or status=null)
    </select>

    <!-- 查询用户已发布的未处理的事件数量 -->
    <select id="getNotProcessPagesNumByUsername" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from event where (publisher=#{userName} or publisher=null) and (status=0 or status=null)
    </select>

    <!-- 查询用户需要处理的已处理的事件数量(对于角色B) -->
    <select id="getHaveProcessPagesNumByUsername" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from event where (handler=#{userName} or handler=null) and (status=1 or status=null)
    </select>

    <!-- 查询用户需要处理的未处理的事件数量(对于角色B） -->
    <select id="getHaveNotProcessPagesNumByUsername" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from event where (handler=#{userName} or handler=null) and (status=0 or status=null)
    </select>

    <!-- 查询用户需要处理的已处理的事件数量(对于角色C、D) -->
    <select id="getHaveProcessPagesNumByUsername1" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from event where (handler=#{userName} or forwarderReceiver=#{userName} or thirdparty=#{userName} or handler=null)
        and(status=1 or status=null)
    </select>

    <!-- 查询用户需要处理的未处理的事件数量(对于角色C、D） -->
    <select id="getHaveNotProcessPagesNumByUsername1" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from event where (handler=#{userName} or forwarderReceiver=#{userName} or thirdparty=#{userName} or handler=null)
        and(status=0 or status=null)
    </select>

    <!--根据事件ID获取事件信息-->
    <select id="getEventByID" parameterType="java.lang.Integer" resultType="com.guet.domain.Event">
        select * from event where eventID=#{eventID}
    </select>

    <!--当事件被转发时更新事件内容-->
    <update id="updateEventByForward">
        update event set forwarder=#{forwarder},forwarderReceiver=#{forwarderReceiver},departmentC=#{departmentC} where eventID = #{eventID}
    </update>

    <!--当事件被转发时更新事件内容-->
    <update id="updateEventByInvitation">
        update event set thirdparty=#{thirdparty},departmentD=#{departmentD} where eventID = #{eventID}
    </update>

    <!--角色D提交事件结果-->
    <update id="updateResultD">
        update event set resultD=#{resultD} where eventID = #{eventID}
    </update>
    <!--角色C提交事件结果-->
    <update id="updateResultC">
        update event set resultC=#{resultC} where eventID = #{eventID}
    </update>
    <!--角色D提交事件结果-->
    <update id="updateResultB">
        update event set resultB=#{resultB},resultLevelB=#{resultLevelB} where eventID = #{eventID}
    </update>
    <!--角色D提交事件结果-->
    <update id="updateResultA">
        update event set resultA=#{resultA},status=1,resultLevelA=#{resultLevelA} where eventID = #{eventID}
    </update>

    <select id="getRoleNameByUserName" parameterType="java.lang.String" resultType="java.lang.String">
       select roleName from role where id in (select roleid from department_role where departmentId in (select departmentId from department_user where userId in (select id from users where userName = #{userName}))) order by roleName limit 1
    </select>


</mapper>